---
description: 
globs: 
alwaysApply: false
---
# Common rules for all projects in projects directory
- only use English, no Chinese;
- all code in the function in the controllers directory should be wrapped by try catch;

# Project Structure Guide

This workspace is organized as a monorepo containing multiple full-stack projects, designed to share dependencies and optimize disk space usage.

## Workspace Structure
- `projects/` - Contains all practice projects
  - Each project is prefixed with a number (e.g., `1-mern-crash`, `2-chat-app`, `3-chat-app`)
  - Projects are organized by type and complexity

## Project Types
The workspace contains three types of projects:
1. React + Node.js projects
   - Frontend: React application
   - Backend: Node.js/Express server
   - May be in separate directories or combined

2. Next.js projects
   - Full-stack Next.js applications
   - Server-side rendering and API routes

3. React Native + Node.js projects
   - Mobile: React Native application
   - Backend: Node.js/Express server

## Project Structure
Each project may follow one of these structures:
1. Combined Structure:
```
project-name/
├── frontend/     # React/Next.js/React Native frontend
├── backend/      # Node.js backend
├── readme.md
├── package.json
└── nodemon.json
```

2. Separate Structure:
```
project-name/
├── client/       # Frontend project
│   ├── src/
│   └── package.json
├── server/       # Backend project
│   ├── src/
│   └── package.json
└── readme.md
```

## Development Guidelines
1. Use `pnpm` as the package manager for dependency sharing
2. Each project is self-contained but shares common dependencies
3. Backend servers typically run on port 5000
4. Frontend development servers typically run on port 3000
5. React Native projects use their default ports

## Getting Started
1. Install workspace dependencies: `pnpm install`
2. Navigate to specific project directory
3. Follow project-specific readme for setup instructions
4. For new projects:
   - Create a new directory with number prefix
   - Choose appropriate project structure
   - Set up frontend and backend as needed

Top-level files like [package.json](mdc:package.json) and [pnpm-workspace.yaml](mdc:pnpm-workspace.yaml) manage dependencies and workspace configuration for the monorepo.

